#!/bin/bash
# To boot permanently either to console or gui on Linux (GNU/Linux)
# by using shell. That's the sense of my existence.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Only tested with Lubuntu (Ubuntu 15.10 )
# Run me with sudo. See the comments for my steps. Feel free to
# pull requests for me on github (https://github.com/NazimKenan/smallShelly).
# Still to do: 1. /etc/default/grub gets bigger by time because of "cat >>".
# 2. Making functions out of my steps in order to make more flexible and
# give me arguments on shell directly.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Clearing terminal and basic variables
clear
myName="$0" #My name is changeable
myAge="0.1" #I am still a baby
mySettings="$(pwd)/.config" #The place for my settings
myBackups="$(pwd)/.backup" #The place for my backups of grub
backupAlreadyMade="$myBackups/$(hostname)" #problem: copying script-directory to another server with exactly the same user. then never backup will be made.
myHome="https://github.com/NazimKenan/smallShelly" #You can visit me.

# Disclaimer to warn people about danger. 
echo "$myName ($myAge): $myHome" 
echo "Please do not use this tool if you do not exactly
know what it does. It could damage your operating system
and could set your data into an unreachable state.
There is no warranty for such issues. For further
information please visit $myHome"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "Do you want to run this program anyway?"
read -p "Type yes to continue or press CTRL + C to cancel: " RUNPROGRAM
if [ "$RUNPROGRAM" != "yes" ] # to add "Yes" and "YES" and "yEs" and "yES" and so on :)
	then
	exit 0
fi
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

# Backup of grub
echo "Checking for former backups on this machine..."
if [ -f $backupAlreadyMade ]
then
	echo "Found backup."
	echo "Listing existing backup files:"
	listOfBackupFiles=$(sudo cat $backupAlreadyMade) #sudo?
	echo "$listOfBackupFiles"
	echo "End of list."
else
 	echo "There is no backup of grub on this machine."
 	echo "Backup will be created now..."
 	# giving backup file date and hostname for filename to make it more stable when
 	# this tool is copied with its own mother directory to another device
 	filename=grubBackup-$(date +"%Y-%m-%d-%H:%M")-$(hostname)
 	cp /etc/default/grub $myBackups/$filename
 	# copying default-grub as grubConsole and grubGui for the first run
 	cp $myBackups/$filename $mySettings/grubConsole
 	cp $myBackups/$filename $mySettings/grubGui
 	# now adding parameters to grub-file for console
 	echo "GRUB_CMDLINE_LINUX_DEFAULT=""" >> $mySettings/grubConsole
 	echo "GRUB_CMDLINE_LINUX="text"" >> $mySettings/grubConsole
 	echo "GRUB_TERMINAL=console". >> $mySettings/grubConsole
 	# now adding parameters to grub-file for gui
 	echo "GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"" >> $mySettings/grubGui
 	echo "GRUB_CMDLINE_LINUX=""" >> $mySettings/grubGui
 	echo "GRUB_TERMINAL=""" >> $mySettings/grubGui
 	# setting file to prevent backups from modified default-grub as default-grub
 	sudo ls -a $myBackups | grep grubBackup >> $backupAlreadyMade
 	echo "Done. Backup of /etc/default/grub to $myBackups created.
Settings for console and gui mode are saved in $mySettings"
fi
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

# Now asking in which state from now on will be boot. Copying
# grubConsole or grubGui and renaming to /etc/default/grub and
# updating groub and setting default for systemctl either as
# multi-user-target (console) or graphical.target (gui).
echo "To which state would you like to boot from now on?"
read -p "Type "console" or "gui" (without "): " bootTo
if [ "$bootTo" == "console" ]
	then
	sudo cp $mySettings/grubConsole /etc/default/grub
 	sudo update-grub
 	sudo systemctl set-default multi-user.target
 	echo "System will boot to console from now on."
 	sleep 2
 	clear && echo "Starting reboot..."
	sleep 2
	sudo shutdown -r now
elif [ "$bootTo" == "gui" ] #if gui
	then
 	sudo cp $mySettings/grubGui /etc/default/grub
 	sudo update-grub
 	sudo systemctl set-default graphical.target
 	echo "System will boot to gui from now on."
 	sleep 2
 	clear && echo "Starting reboot..."
	sleep 2
	sudo shutdown -r now
 else
 	echo "Wrong input. Please consider not to use this tool
 if you do not exactly know what it works like."
 	exit 0
fi
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

exit 0
